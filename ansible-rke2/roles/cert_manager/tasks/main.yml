- name: Add Jetstack to Helm repo
  command: helm repo add jetstack https://charts.jetstack.io

- name: Update Helm repos
  command: helm repo update

- name: Install/upgrade cert-manager (latest) via Helm repo
  become: true
  environment:
    KUBECONFIG: /etc/rancher/rke2/rke2.yaml
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    # IMPORTANT: omit version => always installs newest available
    chart_version: "{{ cert_manager_version | default(omit) }}"
    release_namespace: cert-manager
    create_namespace: true
    wait: true
    atomic: true
    timeout: 600s
    values:
      installCRDs: true
    values_files: []  

- name: Wait until cert-manager CRD is ready
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig }}"
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: clusterissuers.cert-manager.io
  register: crd_check
  until: crd_check is defined and crd_check.resources is defined and crd_check.resources | length > 0
  retries: 10
  delay: 6

- include_role:
    name: kube_secrets
  vars:
    secret_namespace: cert-manager
    secret_name: cloudflare-api-token-secret
    secret_data: 
      api-token: "{{ cloudflared_token }}"

- name: Ensure istio-ingress namespace exists
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig }}"
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata: 
        name: istio-ingress

- name: Check if TLS secret already exists
  ansible.builtin.command: >
    /var/lib/rancher/rke2/bin/kubectl get secret galaxia-tls -n istio-ingress
  environment:
    KUBECONFIG: /etc/rancher/rke2/rke2.yaml
  register: tls_secret_check
  failed_when: false

- name: Check if certificate file exists
  stat:
    path: "{{ cert_crt_path }}"
  register: crt_file

- name: Check if certificate file exists
  stat:
    path: "{{ cert_key_path }}"
  register: key_file

- name: Create TLS secret using kubectl
  ansible.builtin.command: >
    /var/lib/rancher/rke2/bin/kubectl create secret tls galaxia-tls
    --cert="{{cert_crt_path}}"
    --key="{{cert_key_path}}"
    -n istio-ingress
  environment:
    KUBECONFIG: /etc/rancher/rke2/rke2.yaml
  when: "tls_secret_check.rc !=0 and crt_file.stat.exists and key_file.stat.exists"

# Cert should be properly created now but register failures
- name: Verify Cert exists now
  ansible.builtin.command: >
    /var/lib/rancher/rke2/bin/kubectl get secret galaxia-tls -n istio-ingress
  environment:
    KUBECONFIG: /etc/rancher/rke2/rke2.yaml
  register: tls_secret_verify
  failed_when: false

# # --- Debug local file checks ---
# - name: Debug certificate file check
#   ansible.builtin.debug:
#     msg:
#       - "cert exists: {{ crt_file.stat.exists | default('undefined') }}"
#       - "key exists: {{ key_file.stat.exists | default('undefined') }}"
#       - "cert path: {{ cert_crt_path }}"
#       - "key path: {{ cert_key_path }}"

# --- Debug Kubernetes secret check ---
- name: Debug TLS secret check
  ansible.builtin.debug:
    msg:
      - "Secret get command stdout: {{ tls_secret_verify | default('none') }}"
      # - "Secret get command stderr: {{ tls_secret_verify.rc | default('none') }}"
      # - "Return code: {{ tls_secret_check | default('none') }}"
      # - "Return code: {{ tls_secret_check.rc | default('none') }}"
      # - "Secret exists? {{ 'NotFound' in tls_secret_check.stderr }}"
      # - "BOOLEAN?: {{ tls_secret_verify.rc == 1 or not crt_file.stat.exists or not key_file.stat.exists }}"

# Otherwise Get A legit Cert Issuer only if we want to use a legitimate cert
- include_role:
    name: certissuer
  # Use a configured issuer if we dont have one created (tls secret created)
  when: "(tls_secret_verify.rc == 1 or not crt_file.stat.exists or not key_file.stat.exists) or (self_signed is defined and self_signed == 'true') "

# Request A GOD CERT!
- include_role:
    name: certificate
  vars: 
    secret_name: "galaxia-tls"
    dnsNamesList:
      - "*.chaoscauldron.space"
      - "chaoscauldron.space"
    certificate_name: galaxia-god-cert
  # if we didn't already have a good cert or we want for some reason a signed one
  when: "(tls_secret_verify.rc == 1 or not crt_file.stat.exists or not key_file.stat.exists) or (self_signed is defined and self_signed == 'true')"